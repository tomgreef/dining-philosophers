load model-checker.maude .

fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    op _>_ : Nat/{k} Nat/{k} -> Bool .
    op _>=_ : Nat/{k} Nat/{k} -> Bool .
    var N M : Nat .
    ceq [N] = [sd(N, k)] if N >= k .
    eq [N] > [M] = N > M .
    eq [N] >= [M] = N >= M .
endfm

fmod QUEUE/{P :: NAT*} is
    *** Imports
    protecting NAT/{P} .

    *** Sorts
    sort Queue .
    subsort Nat/{P} < Queue .

    *** Basic operations
    op nil : -> Queue [ctor] .
    op __ : Queue Queue -> Queue [ctor assoc id: nil] .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    *** Imports
    protecting NAT/{P} .
    protecting QUEUE/{P} .

    *** Sorts
    sorts Waiter Status Philosopher Chopstick Conf .
    subsorts Waiter Philosopher Chopstick < Conf .
    
    *** Basic operations
    ops thinking hungry eating : -> Status [ctor] .
    op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
    op chopstick : Nat/{P} -> Chopstick [ctor] .
    op none : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: none] .
    op empty : -> Waiter [ctor] .
    op waiter : Queue Bool -> Waiter [ctor] .

    *** Vars
    vars id K initState : Nat .
    var queue : Queue .
    var someoneEating : Bool .

    *** auxInitial
    op auxInitial : Nat -> Conf .
    eq auxInitial(0) = none . 
    eq auxInitial(s initState) = philosopher([initState], thinking, 0) chopstick([initState]) auxInitial(initState) .

    *** initState
    op initState : -> Conf .
    eq initState = waiter(nil, false) auxInitial(k) .

    *** Rules
    rl  [get-hungry]: waiter(queue,someoneEating) philosopher([id],thinking,0)  =>  waiter([id] queue,someoneEating) philosopher([id],hungry,0) .
    rl  [grab-stick]: waiter ([id] queue,false) philosopher([id],hungry,0) 
                      chopstick([id]) chopstick([s(id)])                        => waiter (queue,true) philosopher([id],hungry,2) .
    rl  [eat]       : philosopher([id],hungry,2)                                => philosopher([id],eating,2) .
    rl  [think]     : waiter(queue,true) philosopher([id],eating,2)             => chopstick([id]) philosopher([id],thinking,0) chopstick([s(id)]) waiter(queue,false) .
endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

load model-checker.maude .

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    *** Imports
    pr DINING-PHILOSOPHERS{P} .
    including SATISFACTION .

    *** Sorts
    subsort Conf < State .

    *** Basic operations
    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks : Nat/{P} Nat -> Prop .

    *** Vars
    var M : Nat .
    var S : Status .
    var C : Conf .
    var id : Nat/{P} .

    eq philosopher(id, S, M) C |= phil-status(id, S) = true .
    eq philosopher(id, S, M) C |= phil-sticks(id, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
    pr DINING-PHILOSOPHERS-PREDS{5} .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm
eof

[Q8] search initState =>* philosopher([0], hungry, 1) philosopher([1], hungry, 1) philosopher([2], hungry, 1) philosopher([3], hungry, 1) philosopher([4], hungry, 1) .

----------------
Maude> search initState =>* philosopher([0], hungry, 1) philosopher([1], hungry, 1) philosopher([2], hungry, 1) philosopher([3], hungry, 1) philosopher([4], hungry, 1) .
search in DINING-PHILOSOPHERS-5-CHECK : initState =>* philosopher([0], hungry, 1)
    philosopher([1], hungry, 1) philosopher([2], hungry, 1) philosopher([3], hungry, 1) philosopher([4], hungry, 1) .

No solution.
states: 846  rewrites: 3506 in 0ms cpu (15ms real) (~ rewrites/second)
----------------

[Q9] red modelCheck(initState, [] ~ (phil-sticks([0], 1) /\ phil-sticks([1], 1) /\ phil-sticks([2], 1) /\ phil-sticks([3], 1) /\ phil-sticks([4], 1))) .

----------------
Maude> red modelCheck(initState, [] ~ (phil-sticks([0], 1) /\ phil-sticks([1], 1) /\ phil-sticks([2], 1) /\ phil-sticks([3], 1) /\ phil-sticks([4], 1))) .
reduce in DINING-PHILOSOPHERS-5-CHECK : modelCheck(initState, []~ (phil-sticks([4], 1) /\ (phil-sticks([3], 1)
    /\ (phil-sticks([2], 1) /\ (phil-sticks([0], 1) /\ phil-sticks([1], 1)))))) .
rewrites: 3622 in 0ms cpu (21ms real) (~ rewrites/second)
result Bool: true
----------------

[Q10] red modelCheck(initState, (([]<> phil-status([4], hungry)) -> ([] <> phil-status([4],eating)))) .
----------------
Maude> red modelCheck(initState, [](phil-status([0], hungry) -> <> phil-status([0],eating))) .
reduce in DINING-PHILOSOPHERS-5-CHECK : modelCheck(initState, [](phil-status([0], hungry) -> <>
    phil-status([0], eating))) .
rewrites: 46 in 0ms cpu (0ms real) (~ rewrites/second)
----------------

red modelCheck(initState, [](phil-status([1], hungry) -> <> phil-status([1],eating))) .
----------------
Maude> red modelCheck(initState, [](phil-status([1], hungry) -> <> phil-status([1],eating))) .
reduce in DINING-PHILOSOPHERS-5-CHECK : modelCheck(initState, [](phil-status([1], hungry) -> <> phil-status([1],
    eating))) .
rewrites: 46 in 0ms cpu (0ms real) (~ rewrites/second)
----------------

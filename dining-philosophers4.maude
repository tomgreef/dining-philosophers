fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [N] = [sd(N, k)] if N >= k .
endfm

fmod QUEUE/{P :: NAT*} is
    protecting NAT/{P} .
    sort Queue .
    subsort Nat/{P} < Queue .

    op nil : -> Queue [ctor] .
    op __ : Queue Queue -> Queue [ctor assoc id: nil] .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    *** Imports
    protecting NAT/{P} .
    protecting QUEUE/{P} .

    *** Sorts
    sorts Status Philosopher Chopstick Conf System .
    subsorts Philosopher Chopstick < Conf .
    
    *** Basic operations
    ops thinking hungry eating waiting : -> Status [ctor] .
    op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
    op chopstick : Nat/{P} -> Chopstick [ctor] .
    op none : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: none] .
    op [_,_,_] : Conf Queue Conf -> System .

    *** Vars
    vars id palillo K initState : Nat .
    var queue : Queue .
    vars table1 table2 : Conf .
    var philosopher : Philosopher .

    *** auxInitial
    op auxPhilosopher : Nat -> Conf .
    eq auxPhilosopher(0) = none . 
    eq auxPhilosopher(s initState) = philosopher([initState], thinking, 0)  auxPhilosopher(initState) .

    op auxChopstick : Nat -> Conf .
    eq auxChopstick(0) = none . 
    eq auxChopstick(s initState) = chopstick([initState]) auxChopstick(initState) .

    *** initState
    op initState : -> System .
    eq initState = [auxPhilosopher(k),nil,auxChopstick(k)] .

    *** count
    op count : Conf -> Nat .
    eq count (none) = 0 .
    eq count(chopstick([K]) table1) = count(table1) .
    eq count (philosopher table1) = s (count(table1)) .

    *** Rules
    rl  [get-hungry] : 
        philosopher([id],thinking,0)                                => philosopher([id],hungry,0) .
    rl  [enqueue]    : 
        [(philosopher([id],hungry,0) table1),queue,table2]          => [(philosopher([id],waiting,0) table1),([id] queue), table2] .
    crl  [enter]     :
        [(philosopher([id],waiting,0) table1),([id] queue), table2]  => [table1,queue,(philosopher([id],hungry,0) table2)] 
        if count(table2) < sd(k,1) .
    crl [grab-stick] : 
        [table1,queue,(philosopher([id],hungry,palillo) table2) chopstick([K])]  => [table1, queue,(philosopher([id],hungry,s(palillo)) table2)]
        if palillo < 2 and ([id] == [K] or [s(id)] == [K]) .
    rl  [eat]        : philosopher([id],hungry,2)                   => philosopher([id],eating,2) .
    rl  [think]      : 
    [table1,queue,(philosopher([id],eating,2) table2)]              => [(philosopher([id],thinking,0) table1),queue,table2 chopstick([id]) chopstick([s(id)])] .
endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

load model-checker.maude .

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    *** Imports
    pr DINING-PHILOSOPHERS{P} .
    including SATISFACTION .

    *** Sorts
    subsort Conf System < State .

    *** Basic operations
    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks : Nat/{P} Nat -> Prop .

    *** Vars
    var M : Nat .
    var S : Status .
    var C : Conf .
    var id : Nat/{P} .

    eq philosopher(id, S, M) C |= phil-status(id, S) = true .
    eq philosopher(id, S, M) C |= phil-sticks(id, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
    pr DINING-PHILOSOPHERS-PREDS{5} .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm
eof

[Q12] search initState =>* [C:Conf, Q:Queue, philosopher([0],hungry,1) philosopher([1],hungry,1) philosopher([2],hungry,1) philosopher([3],hungry,1) philosopher([4],hungry,1)] .

[Q13] red modelCheck(initState, [] ~ (phil-sticks([0], 1) /\ phil-sticks([1], 1) /\ phil-sticks([2], 1) /\ phil-sticks([3], 1) /\ phil-sticks([4], 1))) .

[Q14]
    red modelCheck(initState, [](phil-status([0], hungry) -> <> phil-status([0],eating))) .
    red modelCheck(initState, [](phil-status([1], hungry) -> <> phil-status([1],eating))) .
    red modelCheck(initState, [](phil-status([2], hungry) -> <> phil-status([2],eating))) .
    red modelCheck(initState, [](phil-status([3], hungry) -> <> phil-status([3],eating))) .
    red modelCheck(initState, [](phil-status([4], hungry) -> <> phil-status([4],eating))) .

    red modelCheck(initState, (([]<> phil-status([0], hungry)) -> ([] <> phil-status([0],eating)))) .
    red modelCheck(initState, (([]<> phil-status([1], hungry)) -> ([] <> phil-status([1],eating)))) .
    red modelCheck(initState, (([]<> phil-status([2], hungry)) -> ([] <> phil-status([2],eating)))) .
    red modelCheck(initState, (([]<> phil-status([3], hungry)) -> ([] <> phil-status([3],eating)))) .
    red modelCheck(initState, (([]<> phil-status([4], hungry)) -> ([] <> phil-status([4],eating)))) .

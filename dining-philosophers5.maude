fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [N] = [sd(N, k)] if N >= k .
endfm

fmod QUEUE/{P :: NAT*} is
    protecting NAT/{P} .
    sort Queue .
    subsort Nat/{P} < Queue .

    op nil : -> Queue [ctor] .
    op __ : Queue Queue -> Queue [ctor assoc id: nil] .

    var queue : Queue .
    var id id' : Nat .

    op _isIn_ : Nat Queue -> Bool .
    eq id isIn nil = false .
    ceq id isIn ([id'] queue) = true if id = id' .
    eq id isIn ([id'] queue) = id isIn queue .

    op size : Queue -> Nat .
    eq size (nil) = 0 .
    eq size ([id] queue) = s size(queue) .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    *** Imports
    protecting NAT/{P} .
    protecting QUEUE/{P} .

    *** Sorts
    sorts Status Philosopher Chopstick Conf System .
    subsorts Philosopher Chopstick < Conf .
    
    *** Basic operations
    ops thinking hungry eating : -> Status [ctor] .
    op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
    op chopstick : Nat/{P} -> Chopstick [ctor] .
    op none : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: none] .
    op [_,_,_] : Conf Queue Conf -> System .

    *** Vars
    vars id palillo K initState : Nat .
    var queue : Queue .
    vars table1 table2 : Conf .
    var philosopher : Philosopher .

    *** auxInitial
    op auxPhilosopher : Nat -> Conf .
    eq auxPhilosopher(0) = none . 
    eq auxPhilosopher(s initState) = philosopher([initState], thinking, 0)  auxPhilosopher(initState) .

    op auxChopstick : Nat -> Conf .
    eq auxChopstick(0) = none . 
    eq auxChopstick(s initState) = chopstick([initState]) auxChopstick(initState) .

    *** initState
    op initState : -> System .
    eq initState = [auxPhilosopher(k),nil,auxChopstick(k)] .

    *** count
    op count : Conf -> Nat .
    eq count (none) = 0 .
    eq count(chopstick([K]) table2) = count(table2) .
    eq count (philosopher table2) = s (count(table2)) .

    *** Rules
    rl  [get-hungry] : 
        philosopher([id],thinking,0)                                => philosopher([id],hungry,0) .
    crl  [enqueue]    : 
        [(philosopher([id],hungry,0) table1),queue,table2]          => [(philosopher([id],hungry,0) table1),(queue [id]), table2] 
        if not id isIn queue .
    rl  [enter]     :
        [(philosopher([id],hungry,0) table1),([id] queue),(table2 chopstick([id]) chopstick([s(id)]))] => [table1,queue,(philosopher([id],eating,2) table2)] .
    rl  [think]      : 
    [table1,queue,(philosopher([id],eating,2) table2)]              => [(philosopher([id],thinking,0) table1),queue,(table2 chopstick([id]) chopstick([s(id)]))] .
endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

load model-checker.maude .

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    *** Imports
    pr DINING-PHILOSOPHERS{P} .
    including SATISFACTION .

    *** Sorts
    subsort System < State .

    *** Basic operations
    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks : Nat/{P} Nat -> Prop .

    *** Vars
    var M : Nat .
    var S : Status .
    var Q : Queue .
    var C C' : Conf .
    var ID : Nat/{P} .

    eq [C,Q, philosopher(ID, S, M) C'] |= phil-status(ID, S) = true .
    eq [philosopher(ID, S, M) C,Q, C'] |= phil-status(ID, S) = true .
    eq [C,Q, philosopher(ID, S, M) C'] |= phil-sticks(ID, M) = true .
    eq [philosopher(ID, S, M) C,Q, C'] |= phil-sticks(ID, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
    pr DINING-PHILOSOPHERS-PREDS{5} .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm
eof

    red modelCheck(initState, [](phil-status([0], hungry) -> <> phil-status([0],eating))) .
    red modelCheck(initState, [](phil-status([1], hungry) -> <> phil-status([1],eating))) .
    red modelCheck(initState, [](phil-status([2], hungry) -> <> phil-status([2],eating))) .
    red modelCheck(initState, [](phil-status([3], hungry) -> <> phil-status([3],eating))) .
    red modelCheck(initState, [](phil-status([4], hungry) -> <> phil-status([4],eating))) .

    red modelCheck(initState, (([]<> phil-status([0], hungry)) -> ([] <> phil-status([0],eating)))) .
    red modelCheck(initState, (([]<> phil-status([1], hungry)) -> ([] <> phil-status([1],eating)))) .
    red modelCheck(initState, (([]<> phil-status([2], hungry)) -> ([] <> phil-status([2],eating)))) .
    red modelCheck(initState, (([]<> phil-status([3], hungry)) -> ([] <> phil-status([3],eating)))) .
    red modelCheck(initState, (([]<> phil-status([4], hungry)) -> ([] <> phil-status([4],eating)))) .
    
result ModelCheckResult: counterexample({[philosopher([0], thinking, 0) philosopher([1], thinking, 0) philosopher([2],
    thinking, 0) philosopher([3], thinking, 0) philosopher([4], thinking, 0),nil,chopstick([0]) chopstick([1])
    chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], thinking,
    0) philosopher([2], thinking, 0) philosopher([3], thinking, 0) philosopher([4], thinking, 0),nil,chopstick([0])
    chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[philosopher([0], hungry, 0)
    philosopher([1], hungry, 0) philosopher([2], thinking, 0) philosopher([3], thinking, 0) philosopher([4], thinking,
    0),nil,chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'enqueue} {[philosopher([0],
    hungry, 0) philosopher([1], hungry, 0) philosopher([2], thinking, 0) philosopher([3], thinking, 0) philosopher([4],
    thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[
    philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3], thinking, 0)
    philosopher([4], thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],
    'enqueue} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3],
    thinking, 0) philosopher([4], thinking, 0),[1] [2],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3])
    chopstick([4])],'enter} {[philosopher([0], hungry, 0) philosopher([2], hungry, 0) philosopher([3], thinking, 0)
    philosopher([4], thinking, 0),[2],chopstick([0]) chopstick([3]) chopstick([4]) philosopher([1], eating, 2)],'think}
    {[philosopher([0], hungry, 0) philosopher([1], thinking, 0) philosopher([2], hungry, 0) philosopher([3], thinking,
    0) philosopher([4], thinking, 0),[2],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],
    'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3],
    thinking, 0) philosopher([4], thinking, 0),[2],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3])
    chopstick([4])],'enqueue} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0)
    philosopher([3], thinking, 0) philosopher([4], thinking, 0),[2] [1],chopstick([0]) chopstick([1]) chopstick([2])
    chopstick([3]) chopstick([4])],'enter} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([3],
    thinking, 0) philosopher([4], thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([4]) philosopher([2],
    eating, 2)],'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([3], hungry, 0)
    philosopher([4], thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([4]) philosopher([2], eating, 2)],
    'enqueue} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([3], hungry, 0) philosopher([4],
    thinking, 0),[1] [3],chopstick([0]) chopstick([1]) chopstick([4]) philosopher([2], eating, 2)],'think} {[
    philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], thinking, 0) philosopher([3], hungry, 0)
    philosopher([4], thinking, 0),[1] [3],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],
    'enter} {[philosopher([0], hungry, 0) philosopher([2], thinking, 0) philosopher([3], hungry, 0) philosopher([4],
    thinking, 0),[3],chopstick([0]) chopstick([3]) chopstick([4]) philosopher([1], eating, 2)],'think} {[philosopher([
    0], hungry, 0) philosopher([1], thinking, 0) philosopher([2], thinking, 0) philosopher([3], hungry, 0) philosopher(
    [4], thinking, 0),[3],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[
    philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], thinking, 0) philosopher([3], hungry, 0)
    philosopher([4], thinking, 0),[3],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],
    'enqueue} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], thinking, 0) philosopher([3],
    hungry, 0) philosopher([4], thinking, 0),[3] [1],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3])
    chopstick([4])],'enter} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], thinking, 0)
    philosopher([4], thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],
    'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([4],
    thinking, 0),[1],chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],'enqueue} {[philosopher(
    [0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([4], thinking, 0),[1] [2],
    chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],'enter} {[philosopher([0], hungry, 0)
    philosopher([2], hungry, 0) philosopher([4], thinking, 0),[2],chopstick([0]) philosopher([1], eating, 2)
    philosopher([3], eating, 2)],'think} {[philosopher([0], hungry, 0) philosopher([1], thinking, 0) philosopher([2],
    hungry, 0) philosopher([4], thinking, 0),[2],chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating,
    2)],'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher(
    [4], thinking, 0),[2],chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],'enqueue} {[
    philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([4], thinking, 0),[
    2] [1],chopstick([0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],'get-hungry} {[philosopher([0],
    hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([4], hungry, 0),[2] [1],chopstick([
    0]) chopstick([1]) chopstick([2]) philosopher([3], eating, 2)],'enqueue} {[philosopher([0], hungry, 0) philosopher(
    [1], hungry, 0) philosopher([2], hungry, 0) philosopher([4], hungry, 0),[2] [1] [4],chopstick([0]) chopstick([1])
    chopstick([2]) philosopher([3], eating, 2)],'enqueue} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0)
    philosopher([2], hungry, 0) philosopher([4], hungry, 0),[2] [1] [4] [0],chopstick([0]) chopstick([1]) chopstick([
    2]) philosopher([3], eating, 2)],'think} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2],
    hungry, 0) philosopher([3], thinking, 0) philosopher([4], hungry, 0),[2] [1] [4] [0],chopstick([0]) chopstick([1])
    chopstick([2]) chopstick([3]) chopstick([4])],'enter} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0)
    philosopher([3], thinking, 0) philosopher([4], hungry, 0),[1] [4] [0],chopstick([0]) chopstick([1]) chopstick([4])
    philosopher([2], eating, 2)],'think} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2],
    thinking, 0) philosopher([3], thinking, 0) philosopher([4], hungry, 0),[1] [4] [0],chopstick([0]) chopstick([1])
    chopstick([2]) chopstick([3]) chopstick([4])],'enter} {[philosopher([0], hungry, 0) philosopher([2], thinking, 0)
    philosopher([3], thinking, 0) philosopher([4], hungry, 0),[4] [0],chopstick([0]) chopstick([3]) chopstick([4])
    philosopher([1], eating, 2)],'think} {[philosopher([0], hungry, 0) philosopher([1], thinking, 0) philosopher([2],
    thinking, 0) philosopher([3], thinking, 0) philosopher([4], hungry, 0),[4] [0],chopstick([0]) chopstick([1])
    chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry,
    0) philosopher([2], thinking, 0) philosopher([3], thinking, 0) philosopher([4], hungry, 0),[4] [0],chopstick([0])
    chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'enqueue} {[philosopher([0], hungry, 0) philosopher([
    1], hungry, 0) philosopher([2], thinking, 0) philosopher([3], thinking, 0) philosopher([4], hungry, 0),[4] [0] [1],
    chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'get-hungry} {[philosopher([0], hungry,
    0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3], thinking, 0) philosopher([4], hungry,
    0),[4] [0] [1],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],'enqueue} {[philosopher(
    [0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3], thinking, 0) philosopher([
    4], hungry, 0),[4] [0] [1] [2],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3]) chopstick([4])],
    'get-hungry} {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0) philosopher([3],
    hungry, 0) philosopher([4], hungry, 0),[4] [0] [1] [2],chopstick([0]) chopstick([1]) chopstick([2]) chopstick([3])
    chopstick([4])],'enqueue}, {[philosopher([0], hungry, 0) philosopher([1], hungry, 0) philosopher([2], hungry, 0)
    philosopher([3], hungry, 0) philosopher([4], hungry, 0),[4] [0] [1] [2] [3],chopstick([0]) chopstick([1])
    chopstick([2]) chopstick([3]) chopstick([4])],deadlock})